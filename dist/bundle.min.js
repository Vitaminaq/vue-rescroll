'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _vue = require('vue');

var _vue2 = _interopRequireDefault(_vue);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * re-scroll指令封装，它是一个管理整个项目所有滚动状态的智能化指令，
 * 拥有了它，你可以为所欲为。
 */
var RestoreScroll = function (_Vue) {
    _inherits(RestoreScroll, _Vue);

    function RestoreScroll(options) {
        _classCallCheck(this, RestoreScroll);

        var _this = _possibleConstructorReturn(this, (RestoreScroll.__proto__ || Object.getPrototypeOf(RestoreScroll)).call(this));

        _this.opt = options;
        _this.timer = {};
        _this.scrollTimer = {};
        _this.store = options.vnode.context.$store;
        _this.openScrollStore();
        _this.getPosition();
        _this.watchScroll = function () {};
        _this.scrollTo();
        return _this;
    }

    _createClass(RestoreScroll, [{
        key: 'update',
        value: function update() {
            this.scrollTo();
            return this;
        }
    }, {
        key: 'openScrollStore',
        value: function openScrollStore() {
            var _opt = this.opt,
                path = _opt.path,
                name = _opt.name;

            this.store.commit(path + '/$openScrollStore', name);
            return this;
        }
    }, {
        key: 'getPosition',
        value: function getPosition() {
            var _this2 = this;

            if (this.watchScroll) return this;
            var _opt2 = this.opt,
                dom = _opt2.dom,
                path = _opt2.path,
                name = _opt2.name;

            this.watchScroll = function () {
                if (name === nowName) {
                    var key = 'timer-' + path + '-' + name;
                    clearTimeout(_this2.timer[key]);
                    _this2.timer[key] = setTimeout(function () {
                        var position = {
                            x: dom.scrollLeft,
                            y: dom.scrollTop
                        };
                        _this2.store.commit(path + '/$saveScrollStore', { name: name, position: position });
                        delete _this2.timer[key];
                    }, 1000 / 60);
                }
            };
            dom.addEventListener('scroll', this.watchScroll, false);
            return this;
        }
    }, {
        key: 'scrollTo',
        value: function scrollTo() {
            var _opt3 = this.opt,
                dom = _opt3.dom,
                name = _opt3.name,
                path = _opt3.path;

            var a = this.store.getters[path + '/_scrollStore'];
            this.$nextTick(function () {
                if (a[name]) {
                    dom.scrollLeft = a[name].position.x;
                    dom.scrollTop = a[name].position.y;
                } else {
                    dom.scrollLeft = 0;
                    dom.scrollTop = 0;
                }
            });
            return this;
        }
    }, {
        key: 'destroy',
        value: function destroy() {
            var dom = this.opt.dom;

            dom.removeEventListener('scroll', this.watchScroll, false);
            return this;
        }
    }]);

    return RestoreScroll;
}(_vue2.default);

var restoreScroll = {};
var nowName = '';
var directive = {
    inserted: function inserted(el, binding, vnode) {
        nowName = binding.value.name;
        var options = {
            dom: el,
            name: binding.value.name,
            path: binding.value.path,
            vnode: vnode
        };
        if (restoreScroll[options.name]) {
            return restoreScroll[options.name].update(options);
        }
        restoreScroll[options.name] = new RestoreScroll(options);
    },
    componentUpdated: function componentUpdated(el, binding, vnode) {
        nowName = binding.value.name;
        var options = {
            dom: el,
            name: binding.value.name,
            path: binding.value.path,
            vnode: vnode
        };
        if (restoreScroll[options.name]) {
            return restoreScroll[options.name].update(options);
        }
        restoreScroll[options.name] = new RestoreScroll(options);
    },
    unbind: function unbind(el, binding) {
        restoreScroll[binding.value.name].destroy();
        delete restoreScroll[binding.value.name];
    }
};
exports.default = {
    install: function install(Vue) {
        Vue.directive('rescroll', directive);
    }
};